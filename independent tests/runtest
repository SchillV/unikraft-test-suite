#!/bin/python3
import matplotlib.pyplot as plt
import numpy as np
import argparse
import subprocess
import os

ENABLE_GRAPHS = False
githubToken = ""
cmdString = "docker build -f Dockerfile.teststuff --tag=test --build-arg UK_KRAFT_GITHUB_TOKEN="

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(dest='cmd')
parser.add_argument("-t", "--token", action="store", dest="githubToken", type=str)
parser.add_argument("-g", "--graphs", action="store_true", dest="graph",
        default=False)
args = parser.parse_args()
githubToken = args.githubToken
ENABLE_GRAPHS = args.graph

# CONFIGURE TESTS AND RUN THE COMMAND
if(githubToken == ""):
    print("error, invalid github access token\n")
    exit(0)
cmdString += githubToken + " ."
try:
    subprocess.run(cmdString, shell=True)
    subprocess.run("docker run -it test:latest > tmp.txt", shell=True)
except:
    print("error building the docker container\n")
    exit(0)

print("Build successful\nGathering data...")

# PARSE DOCKER OUTPUT
content = ""
p = []
f = []
b = []
pp = []
fp = []
bp = []
with open("./tmp.txt", "r") as file:
    content = file.read().split("\n\n\n")
    file.close()
os.remove("./tmp.txt")

# CREATE THE SYSTEM CALL LOG FILES
print("Generating log files...")
for i in range(1,len(content)):
    if(content[i] is ""):
        continue
    logcont = content[i].split("\n")
    logpath = "./logs/" + logcont[0] + ".log"
    logcontent = ""
    for j in range(1, len(logcont)):
        logcontent += logcont[j] + "\n"
    if(logcontent is ""):
        continue
    with open(logpath, "w") as file:
        file.write(logcontent)
        file.close()

if(ENABLE_GRAPHS is False):
    exit(0)

print("Parsing test numbers...")
cont = content[0].split("\n")
# GET THE NUMBERS FROM THE DOCKERFILE OUTPUT
line = cont[0].split(" ")
for num in line:
    if(num is not ""):
        p.append(int(num))
line = cont[1].split(" ")
for num in line:
    if(num is not ""):
        f.append(int(num))
line = cont[2].split(" ")
for num in line:
    if(num is not ""):
        b.append(int(num))

# CONVERT THE NUMBERS TO PERCENTAGES
for i in range(len(p)):
    tot = p[i] + f[i] + b[i]
    pp.append(p[i] / tot * 100)
    fp.append(f[i] / tot * 100)
    bp.append(b[i] / tot * 100)

syscalls = os.listdir("./syscalls")
# SORT THE ARRAYS SO THAT THE UNIMPLEMENTED SYSTEM CALL TESTS ARE LAST
for i in range(len(bp)-1):
    for j in range(i+1, len(bp)):
        if(bp[i] > bp[j]):
            aux = pp[i]
            pp[i] = pp[j]
            pp[j] = aux
            aux = fp[i]
            fp[i] = fp[j]
            fp[j] = aux
            aux = bp[i]
            bp[i] = bp[j]
            bp[j] = aux
            aux = syscalls[i]
            syscalls[i] = syscalls[j]
            syscalls[j] = aux
            aux = p[i]
            p[i] = p[j]
            p[j] = aux
            aux = f[i]
            f[i] = f[j]
            f[j] = aux
            aux = b[i]
            b[i] = b[j]
            b[j] = aux

pp = np.array_split(np.array(pp), 6)
fp = np.array_split(np.array(fp), 6)
bp = np.array_split(np.array(bp), 6)
# USE THE GATHERED DATA FOR THE PLOT

print("Generating plots...")
for i in range(len(syscalls)):
    syscalls[i] += ": " + str(p[i]) + "/" + str(f[i]) + "/" + str(b[i])

syscalls = [syscalls[i * 60:(i + 1) * 60] for i in range((len(syscalls) + 59) // 60 )]
for i in range(len(syscalls)):
    syscalls[i] = tuple(reversed(syscalls[i]))
data = [{
    'passed': np.flip(pp[0]),
    'failed': np.flip(fp[0]),
    'broken': np.flip(bp[0]),
}, {
    'passed': np.flip(pp[1]),
    'failed': np.flip(fp[1]),
    'broken': np.flip(bp[1]),
}, {
    'passed': np.flip(pp[2]),
    'failed': np.flip(fp[2]),
    'broken': np.flip(bp[2]),
}, {
    'passed': np.flip(pp[3]),
    'failed': np.flip(fp[3]),
    'broken': np.flip(bp[3]),
}, {
    'passed': np.flip(pp[4]),
    'failed': np.flip(fp[4]),
    'broken': np.flip(bp[4]),
}, {
    'passed': np.flip(pp[5]),
    'failed': np.flip(fp[5]),
    'broken': np.flip(bp[5]),
}]
width = 0.6  # the width of the bars: can also be len(x) sequence

bar_colors = {
    'passed': ['tab:green'],
    'failed': ['tab:red'],
    'broken': ['tab:gray'],
}

fig, ax = plt.subplots(ncols=7, figsize=(20,10))
for i in range(6):
    left = np.zeros(60)
    for res, res_count in data[i].items():
        x = ax[i].barh(syscalls[i], res_count, width, label=res, color=bar_colors[res], left=left)
        left += res_count

# For the total plot
tot = sum(p) + sum(f) + sum(b)
total = ("Total")
total_weight = {
    'passed':[int(sum(p) / tot * 10000)/100],
    'failed':[int(sum(f) / tot * 10000)/100],
    'broken':[int(sum(b) / tot * 10000)/100],
}

width = 1
bottom=np.zeros(1)
for res, res_count in total_weight.items():
    x = ax[6].bar(total, res_count, width, label=res, color=bar_colors[res], bottom=bottom)
    bottom += res_count
    ax[6].bar_label(x,label_type='center')

# Final adjustments
ax[3].set_title("System call test results: passed/failed/unfinished")
fig.tight_layout()
plt.ylim(-0.5, 100.5)
plt.show()